package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"strconv"

	nsptopoviewer "local.com/nspgo/nspGo-topoViewer"
)

func main() {
	// init graph object
	graph1 := nsptopoviewer.CyGraph{}

	// graph1.AppendCytoNode("n1", "1", "hostName string", "10.1.1.1/32", "7750", "classes string")
	// graph1.AppendCytoNode("n2", "2", "hostName string", "10.1.1.2/32", "7750", "classes string")
	// graph1.AppendCytoNode("n3", "3", "hostName string", "10.1.1.3/32", "7750", "classes string")

	// graph1.AppendCytoLink("e1", "n1", "n2", "2", "ip", "link-01-02")
	// graph1.AppendCytoLink("e2", "n2", "n1", "2", "ip", "link-02-01")
	// graph1.AppendCytoLink("e3", "n2", "n3", "2", "ip", "link-02-03")
	// graph1.AppendCytoLink("e4", "n1", "n3", "2", "ip", "link-01-03")

	// fmt.Println(graph1.GraphLinks)

	// fmt.Println("----------------------------------")
	// fmt.Println("----------------------------------")
	// fmt.Println("JSON Graph Paling Bener:")
	// fmt.Println("----------------------------------")
	// fmt.Println("----------------------------------")

	// graph1.MarshalCyGraph()

	content, err := ioutil.ReadFile("../../ietfNetwork.json")
	if err != nil {
		log.Fatal("Error when opening file: ", err)
	}

	//var basket IetfNetworkStruct

	var basket nsptopoviewer.IetfNetworkStruct

	err = json.Unmarshal(content, &basket)
	if err != nil {
		log.Println(err)
	}
	//fmt.Println(basket.Response.Data.Network[0].NetworkID)
	//fmt.Println(len(basket.Response.Data.Network))

	var SourceNodeName string
	var DestNodeName string

	for i := 0; i < len(basket.Response.Data.Network); i++ {
		//fmt.Println("NetworkID: " + basket.Response.Data.Network[i].NetworkID)
		//fmt.Println("-------------------------------------------------------------------------------------------")
		//fmt.Println("-------------------------------------------------------------------------------------------")

		for j := 0; j < len(basket.Response.Data.Network[i].Link); j++ {
			var SourceNodeID = basket.Response.Data.Network[i].Link[j].Source.SourceNode
			//fmt.Println("source: " + SourceNodeID)
			var DestNodeID = basket.Response.Data.Network[i].Link[j].Destination.DestNode
			//fmt.Println("destination: " + DestNodeID)
			//fmt.Println("-------------")

			for k := 0; k < len(basket.Response.Data.Network[i].Node); k++ {
				if basket.Response.Data.Network[i].Node[k].NodeID == SourceNodeID {
					//fmt.Println("sourceIP: " + basket.Response.Data.Network[i].Node[k].TeNodeAugment.Te.TeNodeID.DottedQuad.String)
					SourceNodeName = basket.Response.Data.Network[i].Node[k].TeNodeAugment.Te.TeNodeID.DottedQuad.String
					graph1.AppendCytoNode(SourceNodeName, strconv.Itoa(i)+"-"+strconv.Itoa(k), SourceNodeName, SourceNodeName, "7750", "classes string")
				}

				if basket.Response.Data.Network[i].Node[k].NodeID == DestNodeID {
					//fmt.Println("destinationIP: " + basket.Response.Data.Network[i].Node[k].TeNodeAugment.Te.TeNodeID.DottedQuad.String)
					DestNodeName = basket.Response.Data.Network[i].Node[k].TeNodeAugment.Te.TeNodeID.DottedQuad.String
					graph1.AppendCytoNode(DestNodeName, strconv.Itoa(i)+"-"+strconv.Itoa(k), DestNodeName, DestNodeName, "7750", "classes string")
				}

			}
			graph1.AppendCytoLink(strconv.Itoa(i)+"-"+strconv.Itoa(j), SourceNodeName, DestNodeName, "2", "ip", "link-"+SourceNodeName+"-"+DestNodeName)
		}
	}
	graph1.MarshalCyGraph()
}
