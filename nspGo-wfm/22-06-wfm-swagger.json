{
	"swagger": "2.0",
	"info": {
		"description": "Workflow Manager API documentation description.",
		"title": "Workflow Manager API documentation v1",
		"license": {

		}
	},
	"host": "147.75.202.26:8546",
	"basePath": "/wfm/api",
	"tags": [
		{
			"name": "Action Executions",
			"description": " "
		},
		{
			"name": "Actions",
			"description": " "
		},
		{
			"name": "Admin",
			"description": " "
		},
		{
			"name": "Cron Trigger",
			"description": " "
		},
		{
			"name": "Executions",
			"description": " "
		},
		{
			"name": "Filter Test",
			"description": " "
		},
		{
			"name": "Git Integration",
			"description": " "
		},
		{
			"name": "Jinja Template",
			"description": " "
		},
		{
			"name": "Kafka Trigger",
			"description": " "
		},
		{
			"name": "Policy",
			"description": " "
		},
		{
			"name": "Statistics",
			"description": " "
		},
		{
			"name": "System",
			"description": " "
		},
		{
			"name": "Tasks",
			"description": " "
		},
		{
			"name": "Workflow Environment",
			"description": " "
		},
		{
			"name": "Workflows",
			"description": " "
		},
		{
			"name": "notification-producer-controller",
			"description": "Notification Producer Controller"
		}
	],
	"schemes": [
		"https"
	],
	"paths": {
		"/v1/action": {
			"get": {
				"tags": [
					"Actions"
				],
				"summary": "Query all actions",
				"description": "Query all actions",
				"operationId": "getActions",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Custom filter for actions",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						},
						"allowEmptyValue": false
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Action»»",
							"$ref": "#/definitions/ResponseData«List«Action»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Actions"
				],
				"summary": "Create an action",
				"description": "Create an action using Mistral DSL",
				"operationId": "createAction",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "ActionRequest",
							"$ref": "#/definitions/ActionRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Action»»",
							"$ref": "#/definitions/ResponseData«List«Action»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action-execution": {
			"get": {
				"tags": [
					"Action Executions"
				],
				"summary": "Query all action-executions",
				"description": "Query all action-executions",
				"operationId": "getActionExecutions",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«ActionExecution»»",
							"$ref": "#/definitions/ResponseData«List«ActionExecution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Action Executions"
				],
				"summary": "Run an action-execution",
				"description": "Run an action-execution",
				"operationId": "runActionExecution",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "ActionExecutionRequest",
							"$ref": "#/definitions/ActionExecutionRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«ActionExecution»»",
							"$ref": "#/definitions/ResponseData«List«ActionExecution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action-execution/asyncWaiting": {
			"get": {
				"tags": [
					"Action Executions"
				],
				"summary": "Fetch all action-executions that are waiting for user input",
				"description": "fetch the mistral_http action-executions",
				"operationId": "getWaitingActionExecutions",
				"produces": [
					"*/*"
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«ActionExecution»»",
							"$ref": "#/definitions/ResponseData«List«ActionExecution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action-execution/task/{id}": {
			"get": {
				"tags": [
					"Action Executions"
				],
				"summary": "Query action-executions by task",
				"description": "Query action-executions by task",
				"operationId": "getActionExecutionByTask",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an action-execution",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«ActionExecution»»",
							"$ref": "#/definitions/ResponseData«List«ActionExecution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action-execution/{id}": {
			"get": {
				"tags": [
					"Action Executions"
				],
				"summary": "Query for an action-execution",
				"description": "Query for an action-execution",
				"operationId": "getActionExecution",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an action-execution",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«ActionExecution»",
							"$ref": "#/definitions/ResponseData«ActionExecution»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Action Executions"
				],
				"summary": "Update an action-execution",
				"description": "Update an action-execution",
				"operationId": "updateActionExecution",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an action-execution",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "updateActionExecution",
						"description": "updateActionExecution",
						"required": true,
						"schema": {
							"originalRef": "ActionExecutionUpdateRequest",
							"$ref": "#/definitions/ActionExecutionUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«ActionExecution»»",
							"$ref": "#/definitions/ResponseData«List«ActionExecution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Action Executions"
				],
				"summary": "Delete an action-execution",
				"description": "Delete an action-execution",
				"operationId": "deleteActionExecution",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an action-execution",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action/definition": {
			"post": {
				"tags": [
					"Actions"
				],
				"summary": "Create a action with (Mistral v2 DSL YAML)",
				"description": "Create an action using Mistral DSL",
				"operationId": "createActionDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Action»»",
							"$ref": "#/definitions/ResponseData«List«Action»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action/export": {
			"get": {
				"tags": [
					"Actions"
				],
				"summary": "Bulk export actions with filter",
				"description": "Bulk export actions with filter",
				"operationId": "exportActionsBulkFilter",
				"produces": [
					"*/*",
					"application/zip"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Custom filter for actions",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						},
						"allowEmptyValue": false
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action/validate": {
			"post": {
				"tags": [
					"Actions"
				],
				"summary": "Validate an action",
				"description": "Validate an action definition using Mistral v2 DSL YAML",
				"operationId": "validateAction",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Validate»",
							"$ref": "#/definitions/ResponseData«Validate»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action/{id}": {
			"get": {
				"tags": [
					"Actions"
				],
				"summary": "Query for an action",
				"description": "Query for an action",
				"operationId": "getAction",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for action",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Action»",
							"$ref": "#/definitions/ResponseData«Action»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Actions"
				],
				"summary": "Delete an action",
				"description": "Delete an action",
				"operationId": "deleteAction",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for action",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action/{id}/clone": {
			"post": {
				"tags": [
					"Actions"
				],
				"summary": "Clone an action",
				"description": "Clone an existing action",
				"operationId": "cloneAction",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "cloneName",
						"description": "cloneName",
						"required": false,
						"schema": {
							"originalRef": "ActionClone",
							"$ref": "#/definitions/ActionClone"
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Action»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Action»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action/{id}/definition": {
			"get": {
				"tags": [
					"Actions"
				],
				"summary": "Query for action definition",
				"description": "Query for action definition",
				"operationId": "getActionDefinition",
				"produces": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for action",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Actions"
				],
				"summary": "Update action definition (Mistral v2 DSL YAML)",
				"description": "Update action",
				"operationId": "updateActionDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for action",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Action»»",
							"$ref": "#/definitions/ResponseData«List«Action»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed yaml or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/action/{id}/export": {
			"get": {
				"tags": [
					"Actions"
				],
				"summary": "Export an action as yaml file",
				"description": "Export an action to a yaml file",
				"operationId": "exportYaml",
				"produces": [
					"application/octet-stream"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an action",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/admin/workflow": {
			"get": {
				"tags": [
					"Admin"
				],
				"summary": "Query all workflows",
				"description": "Query all workflows",
				"operationId": "getWorkflows",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Custom filter for workflows",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						},
						"allowEmptyValue": false
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/admin/workflow/usergroups": {
			"put": {
				"tags": [
					"Admin"
				],
				"summary": "Update workflow user groups",
				"description": "Put workflow user groups",
				"operationId": "putUserGroups",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "UserGroupRequest",
							"$ref": "#/definitions/UserGroupRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Admin"
				],
				"summary": "Delete workflow user groups",
				"description": "Delete workflow user groups",
				"operationId": "deleteUserGroups",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "UserGroupRequest",
							"$ref": "#/definitions/UserGroupRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"patch": {
				"tags": [
					"Admin"
				],
				"summary": "Update workflow user groups",
				"description": "Patch workflow user groups",
				"operationId": "patchUserGroups",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "UserGroupRequest",
							"$ref": "#/definitions/UserGroupRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/cron-trigger": {
			"get": {
				"tags": [
					"Cron Trigger"
				],
				"summary": "Query all cron-triggers",
				"description": "Query all cron-triggers",
				"operationId": "getCronTriggers",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«CronTrigger»»",
							"$ref": "#/definitions/ResponseData«List«CronTrigger»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Cron Trigger"
				],
				"summary": "Create a cron-trigger",
				"description": "Create a cron-trigger",
				"operationId": "createCronTrigger",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "CronTriggerRequestNotify",
							"$ref": "#/definitions/CronTriggerRequestNotify"
						}
					},
					{
						"name": "timezone",
						"in": "query",
						"description": "timezone",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«CronTrigger»",
							"$ref": "#/definitions/ResponseData«CronTrigger»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/cron-trigger/workflow/{id}": {
			"get": {
				"tags": [
					"Cron Trigger"
				],
				"summary": "Query for a cron-trigger by Workflow ID",
				"description": "Query for a cron-trigger by Workflow ID",
				"operationId": "getCronTriggerPerWorkflow",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for cron-trigger",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«CronTrigger»»",
							"$ref": "#/definitions/ResponseData«List«CronTrigger»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/cron-trigger/{id}": {
			"get": {
				"tags": [
					"Cron Trigger"
				],
				"summary": "Query for a cron-trigger",
				"description": "Query for a cron-trigger",
				"operationId": "getCronTrigger",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for cron-trigger",
						"required": false,
						"type": "string"
					},
					{
						"name": "timezone",
						"in": "query",
						"description": "timezone",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«CronTrigger»",
							"$ref": "#/definitions/ResponseData«CronTrigger»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Cron Trigger"
				],
				"summary": "Delete a cron-trigger",
				"description": "Delete a cron-trigger",
				"operationId": "deleteCronTrigger",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a cron-trigger",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/execution": {
			"get": {
				"tags": [
					"Executions"
				],
				"summary": "Query all Executions",
				"description": "Query all executions",
				"operationId": "getExecutions",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Execution»»",
							"$ref": "#/definitions/ResponseData«List«Execution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Executions"
				],
				"summary": "Create an execution",
				"description": "Create an execution",
				"operationId": "createExecution",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "aRequest",
						"description": "aRequest",
						"required": true,
						"schema": {
							"originalRef": "ExecutionRequestNotify",
							"$ref": "#/definitions/ExecutionRequestNotify"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Execution»»",
							"$ref": "#/definitions/ResponseData«List«Execution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/execution/synchronous": {
			"post": {
				"tags": [
					"Executions"
				],
				"summary": "Create a synchronous execution",
				"description": "Create a synchronous execution",
				"operationId": "createSyncExecution",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "aRequest",
						"description": "aRequest",
						"required": true,
						"schema": {
							"originalRef": "ExecutionRequestNotify",
							"$ref": "#/definitions/ExecutionRequestNotify"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Execution»»",
							"$ref": "#/definitions/ResponseData«List«Execution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/execution/workflow/{id}": {
			"get": {
				"tags": [
					"Executions"
				],
				"summary": "Get all executions for a workflow",
				"description": "Query executions for a workflow",
				"operationId": "getExecutionsPerWorkflow",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Execution»»",
							"$ref": "#/definitions/ResponseData«List«Execution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/execution/{id}": {
			"get": {
				"tags": [
					"Executions"
				],
				"summary": "Query for an execution",
				"description": "Query for an execution",
				"operationId": "getExecution",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an execution",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Execution»",
							"$ref": "#/definitions/ResponseData«Execution»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Executions"
				],
				"summary": "Update an execution",
				"description": "Update an execution",
				"operationId": "updateExecution",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an execution",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "ExecutionRequest",
							"$ref": "#/definitions/ExecutionRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Execution»»",
							"$ref": "#/definitions/ResponseData«List«Execution»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Executions"
				],
				"summary": "Delete an execution",
				"description": "Delete an execution",
				"operationId": "deleteExecution",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an execution",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/execution/{id}/quickview": {
			"get": {
				"tags": [
					"Executions"
				],
				"summary": "Gather Quick View information for Execution",
				"description": "Gather Quick View information for Execution",
				"operationId": "getQuickViewExecution",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an execution",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData",
							"$ref": "#/definitions/ResponseData"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/filter-test": {
			"post": {
				"tags": [
					"Filter Test"
				],
				"summary": "Test a filter against a payload",
				"description": "Test a filter",
				"operationId": "test-filter",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "FilterTestRequest",
							"$ref": "#/definitions/FilterTestRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«FilterTestResponse»",
							"$ref": "#/definitions/ResponseData«FilterTestResponse»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/gitIntegration/workflow/import": {
			"post": {
				"tags": [
					"Git Integration"
				],
				"summary": "Import a Git Workflow",
				"description": "Import a Git Workflow",
				"operationId": "getContents",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "WorkflowRequest",
							"$ref": "#/definitions/WorkflowRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Workflow»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Workflow»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/gitIntegration/workflow/{id}": {
			"put": {
				"tags": [
					"Git Integration"
				],
				"summary": "Update a Git workflow definition",
				"description": "Update a Git workflow definition",
				"operationId": "updateWorkflowDefinition",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "WorkflowRequest",
							"$ref": "#/definitions/WorkflowRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/jinja-template": {
			"get": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Query all jinja templates",
				"description": "Query all jinja templates",
				"operationId": "getJinjaTemplates",
				"produces": [
					"*/*"
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«JinjaTemplate»»",
							"$ref": "#/definitions/ResponseData«List«JinjaTemplate»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Create a jinja template",
				"description": "Create a jinja template",
				"operationId": "createJinjaTemplate",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«JinjaTemplate»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«JinjaTemplate»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/jinja-template/export": {
			"get": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Bulk export jinja templates",
				"description": "Bulk export jinja templates",
				"operationId": "exportJinjaTemplatesBulk",
				"produces": [
					"*/*",
					"application/zip"
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"204": {
						"description": "OK - No Content",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/jinja-template/validate": {
			"post": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Parse Jinja Template YAML Definition",
				"description": "Parse Jinja Template YAML Definition",
				"operationId": "parseJinjaTemplateDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Validate»",
							"$ref": "#/definitions/ResponseData«Validate»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/jinja-template/{id}": {
			"get": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Query for a jinja template",
				"description": "Query for a jinja template",
				"operationId": "getJinjaTemplate",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a jinja template",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«JinjaTemplate»",
							"$ref": "#/definitions/ResponseData«JinjaTemplate»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Update a jinja template",
				"description": "Update a jinja template",
				"operationId": "updateJinjaTemplate",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Jinja template ID/Name",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«JinjaTemplate»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«JinjaTemplate»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Delete a jinja template",
				"description": "Delete a jinja template",
				"operationId": "deleteJinjaTemplate",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow environment",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/jinja-template/{id}/definition": {
			"get": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Query for a jinja template definition",
				"description": "Query for a jinja template definition",
				"operationId": "getJinjaTemplateDefinition",
				"produces": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an jinja template",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/jinja-template/{id}/export": {
			"get": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Export a jinja template as yaml file",
				"description": "Export a jinja template to a yaml file",
				"operationId": "exportYaml_1",
				"produces": [
					"application/octet-stream"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an jinja template",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/jinja-template/{id}/template": {
			"get": {
				"tags": [
					"Jinja Template"
				],
				"summary": "Query for a jinja template content",
				"description": "Query for a jinja template content",
				"operationId": "getJinjaTemplateContent",
				"produces": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an jinja template",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/kafka-trigger": {
			"get": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Query all kafka triggers",
				"description": "Query all kafka triggers",
				"operationId": "gets",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						},
						"allowEmptyValue": false
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«KafkaTrigger»»",
							"$ref": "#/definitions/ResponseData«List«KafkaTrigger»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Create a kafka trigger",
				"description": "Create a kafka trigger",
				"operationId": "create",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "KafkaTriggerRequest",
							"$ref": "#/definitions/KafkaTriggerRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«KafkaTrigger»",
							"$ref": "#/definitions/ResponseData«KafkaTrigger»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/kafka-trigger/validate": {
			"post": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Parse Kafka Trigger YAML Definition",
				"description": "Parse Kafka Trigger YAML Definition",
				"operationId": "parseKafkaTriggerDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Validate»",
							"$ref": "#/definitions/ResponseData«Validate»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/kafka-trigger/workflow/{id}": {
			"get": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Query all kafka triggers by workflow id",
				"description": "Query all kafka triggers for a given workflow id",
				"operationId": "getKafkaTriggerByWorkflowId",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«KafkaTrigger»»",
							"$ref": "#/definitions/ResponseData«List«KafkaTrigger»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/kafka-trigger/{id}": {
			"get": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Query for a kafka trigger",
				"description": "Query for a kafka trigger",
				"operationId": "get",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "UUID of a Kafka Trigger",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«KafkaTrigger»",
							"$ref": "#/definitions/ResponseData«KafkaTrigger»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Update a kafka trigger",
				"description": "Update a kafka trigger",
				"operationId": "update",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "UUID of the kafka trigger to update",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "KafkaTriggerRequest",
							"$ref": "#/definitions/KafkaTriggerRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«KafkaTrigger»",
							"$ref": "#/definitions/ResponseData«KafkaTrigger»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Delete a kafka trigger",
				"description": "Delete a kafka trigger",
				"operationId": "delete",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "UUID of the kafka trigger to delete",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/kafka-trigger/{id}/counter": {
			"put": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Reset a kafka trigger counter",
				"description": "Reset a kafka trigger counter",
				"operationId": "reset",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "UUID of the kafka trigger to reset counter",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«KafkaTrigger»",
							"$ref": "#/definitions/ResponseData«KafkaTrigger»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/kafka-trigger/{id}/export": {
			"get": {
				"tags": [
					"Kafka Trigger"
				],
				"summary": "Export kafka trigger as yaml file",
				"description": "Export kafka trigger to a yaml file",
				"operationId": "exportYaml_2",
				"produces": [
					"application/octet-stream"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for kafka trigger",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/notification/producer/filter/update": {
			"put": {
				"tags": [
					"notification-producer-controller"
				],
				"summary": "updateApplicationFilter",
				"operationId": "updateApplicationFilterUsingPUT",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "applicationFilterVO",
						"description": "applicationFilterVO",
						"required": true,
						"schema": {
							"originalRef": "ApplicationFilterVO",
							"$ref": "#/definitions/ApplicationFilterVO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"originalRef": "ResponseData«string»",
							"$ref": "#/definitions/ResponseData«string»"
						}
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/notification/producer/filter/validation": {
			"post": {
				"tags": [
					"notification-producer-controller"
				],
				"summary": "validateFilter",
				"operationId": "validateFilterUsingPOST",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "applicationFilterVO",
						"description": "applicationFilterVO",
						"required": true,
						"schema": {
							"originalRef": "ApplicationFilterVO",
							"$ref": "#/definitions/ApplicationFilterVO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"originalRef": "ResponseData«string»",
							"$ref": "#/definitions/ResponseData«string»"
						}
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/notification/producer/properties/validation": {
			"post": {
				"tags": [
					"notification-producer-controller"
				],
				"summary": "validatePropertyNames",
				"operationId": "validatePropertyNamesUsingPOST",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "propertyNamesVO",
						"description": "propertyNamesVO",
						"required": true,
						"schema": {
							"originalRef": "PropertyNamesVO",
							"$ref": "#/definitions/PropertyNamesVO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"originalRef": "ResponseData«string»",
							"$ref": "#/definitions/ResponseData«string»"
						}
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/notification/producer/publishing/start": {
			"post": {
				"tags": [
					"notification-producer-controller"
				],
				"summary": "startPublishing",
				"operationId": "startPublishingUsingPOST",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "producerStartVO",
						"description": "producerStartVO",
						"required": true,
						"schema": {
							"originalRef": "ProducerStartVO",
							"$ref": "#/definitions/ProducerStartVO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"originalRef": "ResponseData«string»",
							"$ref": "#/definitions/ResponseData«string»"
						}
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/notification/producer/publishing/stop": {
			"post": {
				"tags": [
					"notification-producer-controller"
				],
				"summary": "stopPublishing",
				"operationId": "stopPublishingUsingPOST",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "producerStopVO",
						"description": "producerStopVO",
						"required": true,
						"schema": {
							"originalRef": "ProducerStopVO",
							"$ref": "#/definitions/ProducerStopVO"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"originalRef": "ResponseData«string»",
							"$ref": "#/definitions/ResponseData«string»"
						}
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/policy": {
			"get": {
				"tags": [
					"Policy"
				],
				"summary": "Query all policies",
				"description": "Query all policies",
				"operationId": "getPolicies",
				"produces": [
					"*/*"
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Policy»»",
							"$ref": "#/definitions/ResponseData«List«Policy»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Policy"
				],
				"summary": "Create a policy",
				"description": "Create a policy",
				"operationId": "createPolicy",
				"consumes": [
					"application/json",
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "PolicyRequest",
							"$ref": "#/definitions/PolicyRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Policy»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Policy»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/policy/{id}": {
			"get": {
				"tags": [
					"Policy"
				],
				"summary": "Query for a policy",
				"description": "Query for a policy",
				"operationId": "getPolicy",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a policy",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Policy»",
							"$ref": "#/definitions/ResponseData«Policy»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Policy"
				],
				"summary": "Update a policy",
				"description": "Update a policy",
				"operationId": "updatePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "policy ID/Name",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "PolicyRequest",
							"$ref": "#/definitions/PolicyRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Policy»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Policy»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Policy"
				],
				"summary": "Delete a policy",
				"description": "Delete a policy",
				"operationId": "deletePolicy",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow environment",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/statistics/dashboard": {
			"get": {
				"tags": [
					"Statistics"
				],
				"summary": "Gather Statistics for Dashboard",
				"description": "Gather Statistics for Dashboard",
				"operationId": "getDashboardStats",
				"produces": [
					"*/*"
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Statistics»",
							"$ref": "#/definitions/ResponseData«Statistics»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/statistics/execution/{id}": {
			"get": {
				"tags": [
					"Statistics"
				],
				"summary": "Gather Statistics for Execution Dashboard",
				"description": "Gather Statistics for Execution Dashboard",
				"operationId": "getExecutionStats",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Statistics»",
							"$ref": "#/definitions/ResponseData«Statistics»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/statistics/task/{id}": {
			"get": {
				"tags": [
					"Statistics"
				],
				"summary": "Gather Statistics for Task Dashboard",
				"description": "Gather Statistics for Task Dashboard",
				"operationId": "getTaskStats",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Statistics»",
							"$ref": "#/definitions/ResponseData«Statistics»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/statistics/workflow/{id}": {
			"get": {
				"tags": [
					"Statistics"
				],
				"summary": "Gather Statistics for Workflow Dashboard",
				"description": "Gather Statistics for Workflow Dashboard",
				"operationId": "getWorkflowStats",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Statistics»",
							"$ref": "#/definitions/ResponseData«Statistics»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/system-status": {
			"get": {
				"tags": [
					"System"
				],
				"summary": "Query System Status",
				"description": "Query System Status",
				"operationId": "getSystemStatus",
				"produces": [
					"*/*"
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«SystemStatus»",
							"$ref": "#/definitions/ResponseData«SystemStatus»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/task": {
			"get": {
				"tags": [
					"Tasks"
				],
				"summary": "Query all tasks",
				"description": "Query all tasks",
				"operationId": "getTasks",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Task»»",
							"$ref": "#/definitions/ResponseData«List«Task»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/task/execution/{id}": {
			"get": {
				"tags": [
					"Tasks"
				],
				"summary": "Query tasks by execution",
				"description": "Query tasks by execution",
				"operationId": "getTasksByExecution",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "filter",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for execution",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Task»»",
							"$ref": "#/definitions/ResponseData«List«Task»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/task/{id}": {
			"get": {
				"tags": [
					"Tasks"
				],
				"summary": "Query for a task",
				"description": "Query for a task",
				"operationId": "getTask",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for task",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Task»",
							"$ref": "#/definitions/ResponseData«Task»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Tasks"
				],
				"summary": "Re-run a failed task",
				"description": "Re-runs a failed task or resumes task using with-items from the failed index",
				"operationId": "rerunFailedTask",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for task",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "TaskUpdateRequest",
							"$ref": "#/definitions/TaskUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Task»»",
							"$ref": "#/definitions/ResponseData«List«Task»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow": {
			"get": {
				"tags": [
					"Workflows"
				],
				"summary": "Query all workflows",
				"description": "Query all workflows",
				"operationId": "getWorkflows_1",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Custom filter for workflows",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						},
						"allowEmptyValue": false
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Workflows"
				],
				"summary": "Create a workflow",
				"description": "Create a workflow using Mistral DSL with escaped characters",
				"operationId": "createWorkflow",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "WorkflowRequest",
							"$ref": "#/definitions/WorkflowRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Workflow»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Workflow»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow-environment": {
			"get": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Query all workflow environments",
				"description": "Query all workflow environments",
				"operationId": "getEnvironments",
				"produces": [
					"*/*"
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«WorkflowEnvironment»»",
							"$ref": "#/definitions/ResponseData«List«WorkflowEnvironment»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"post": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Create a workflow environment",
				"description": "Create a workflow environment",
				"operationId": "createWorkflowEnvironment",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«WorkflowEnvironment»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«WorkflowEnvironment»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow-environment/parseDefinition": {
			"post": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Parse Workflow Environment YAML Definition",
				"description": "Parse Workflow Environment YAML Definition",
				"operationId": "parseEnvironmentDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Validate»",
							"$ref": "#/definitions/ResponseData«Validate»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow-environment/validate": {
			"post": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Validate Workflow Environment YAML Definition",
				"description": "Validate Workflow Environment YAML Definition",
				"operationId": "validateEnvironmentDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Validate»",
							"$ref": "#/definitions/ResponseData«Validate»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow-environment/{id}": {
			"get": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Query for a workflow environment",
				"description": "Query for a workflow environment",
				"operationId": "getWorkflowEnvironment",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow environment",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«WorkflowEnvironment»",
							"$ref": "#/definitions/ResponseData«WorkflowEnvironment»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Update a workflow environment",
				"description": "Update a workflow environment",
				"operationId": "updateWorkflowDefinition_2",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Workflow environment Name",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«WorkflowEnvironment»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«WorkflowEnvironment»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Delete a workflow environment",
				"description": "Delete a workflow environment",
				"operationId": "deleteWorkflowEnvironment",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow environment",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow-environment/{id}/definition": {
			"get": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Query for a workflow environment definition",
				"description": "Query for a workflow environment definition",
				"operationId": "getWorkflowEnvironmentDefinition",
				"produces": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow-environment/{id}/export": {
			"get": {
				"tags": [
					"Workflow Environment"
				],
				"summary": "Export a workflow environment as yaml file",
				"description": "Export a workflow environment to a yaml file",
				"operationId": "exportYaml_4",
				"produces": [
					"application/octet-stream"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow environment",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/definition": {
			"post": {
				"tags": [
					"Workflows"
				],
				"summary": "Create a workflow with (Mistral v2 DSL YAML)",
				"description": "Create a workflow using Mistral DSL",
				"operationId": "createWorkflowDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "provider",
						"in": "query",
						"description": "Author/Provider of the workflow",
						"required": false,
						"type": "string",
						"allowEmptyValue": false
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Workflow»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Workflow»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/export": {
			"get": {
				"tags": [
					"Workflows"
				],
				"summary": "Bulk export workflows with filter",
				"description": "Bulk export workflows with filter",
				"operationId": "exportBulkFilter",
				"produces": [
					"*/*",
					"application/zip"
				],
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Custom filter for workflows",
						"required": false,
						"items": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							}
						},
						"allowEmptyValue": false
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/importPackage": {
			"post": {
				"tags": [
					"Workflows"
				],
				"summary": "Import a Workflow package",
				"description": "Import a Workflow package",
				"operationId": "importPackage",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "file",
						"in": "formData",
						"description": "The workflow package in .zip format",
						"required": true,
						"type": "file"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«string»»",
							"$ref": "#/definitions/ResponseData«List«string»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/parseDefinition": {
			"post": {
				"tags": [
					"Workflows"
				],
				"summary": "Parse Workflow YAML Definition",
				"description": "Parse Workflow YAML Definition",
				"operationId": "parseWorkflowDefinition",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "WorkflowRequest",
							"$ref": "#/definitions/WorkflowRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«WorkflowPreview»",
							"$ref": "#/definitions/ResponseData«WorkflowPreview»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/validate": {
			"post": {
				"tags": [
					"Workflows"
				],
				"summary": "Validate a workflow definition (Mistral v2 DSL YAML)",
				"description": "Validate a workflow definition using Mistral v2 DSL YAML",
				"operationId": "validateWorkflowDefinition",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Validate»",
							"$ref": "#/definitions/ResponseData«Validate»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}": {
			"get": {
				"tags": [
					"Workflows"
				],
				"summary": "Query for a workflow",
				"description": "Query for a workflow",
				"operationId": "getWorkflow",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«Workflow»",
							"$ref": "#/definitions/ResponseData«Workflow»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"delete": {
				"tags": [
					"Workflows"
				],
				"summary": "Delete a workflow",
				"description": "Delete a workflow",
				"operationId": "deleteWorkflow",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«boolean»",
							"$ref": "#/definitions/ResponseData«boolean»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}/clone": {
			"post": {
				"tags": [
					"Workflows"
				],
				"summary": "Clone a workflow",
				"description": "Clone an existing workflow and corresponding artifacts",
				"operationId": "cloneWorkflow",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"in": "body",
						"name": "cloneName",
						"description": "cloneName",
						"required": false,
						"schema": {
							"originalRef": "WorkflowClone",
							"$ref": "#/definitions/WorkflowClone"
						}
					},
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Workflow»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Workflow»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}/definition": {
			"get": {
				"tags": [
					"Workflows"
				],
				"summary": "Query for a workflow definition",
				"description": "Query for a workflow definition",
				"operationId": "getWorkflowDefinition",
				"produces": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Workflows"
				],
				"summary": "Update a workflow definition (Mistral v2 DSL YAML)",
				"description": "Update a workflow",
				"operationId": "updateWorkflowDefinition_1",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					},
					{
						"name": "provider",
						"in": "query",
						"description": "Author/Provider of the workflow",
						"required": false,
						"type": "string",
						"allowEmptyValue": false
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "signature",
						"in": "query",
						"description": "Signature for the workflow (if applicable)",
						"required": false,
						"type": "string",
						"allowEmptyValue": false
					},
					{
						"name": "version",
						"in": "query",
						"description": "Version of the workflow",
						"required": false,
						"type": "string",
						"allowEmptyValue": false
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Workflow»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Workflow»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}/export": {
			"get": {
				"tags": [
					"Workflows"
				],
				"summary": "Export a workflow as yaml file",
				"description": "Export a workflow to a yaml file",
				"operationId": "exportYaml_3",
				"produces": [
					"application/octet-stream"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					},
					{
						"name": "zip",
						"in": "query",
						"description": "zip",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"type": "string",
							"format": "byte"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}/quickview": {
			"get": {
				"tags": [
					"Workflows"
				],
				"summary": "Gather Quick View information on the latest Execution of a Workflow",
				"description": "Gather Quick View information on the latest Execution of a Workflow",
				"operationId": "getQuickViewWorkflowExecution",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for a workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData",
							"$ref": "#/definitions/ResponseData"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}/readme": {
			"put": {
				"tags": [
					"Workflows"
				],
				"summary": "Update a workflow with ReadMe",
				"description": "Update a workflow readme",
				"operationId": "updateWorkflowReadMe",
				"consumes": [
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}/status": {
			"put": {
				"tags": [
					"Workflows"
				],
				"summary": "Update workflow status",
				"description": "Update workflow status",
				"operationId": "updateWorkflowStatus",
				"consumes": [
					"application/json"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Workflow ID",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "WorkflowUpdateStatusRequest",
							"$ref": "#/definitions/WorkflowUpdateStatusRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData«List«Workflow»»",
							"$ref": "#/definitions/ResponseData«List«Workflow»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		},
		"/v1/workflow/{id}/ui": {
			"get": {
				"tags": [
					"Workflows"
				],
				"summary": "Query for yang and UI schema for a workflow",
				"description": "Query for yang and UI schema for a workflow",
				"operationId": "getUI",
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Unique Identifier for an workflow",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "ResponseData",
							"$ref": "#/definitions/ResponseData"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			},
			"put": {
				"tags": [
					"Workflows"
				],
				"summary": "Create a UI object for a workflow",
				"description": "Create a UI object for a workflow",
				"operationId": "createYangObject",
				"consumes": [
					"application/json",
					"text/plain"
				],
				"produces": [
					"*/*"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"originalRef": "JsonNode",
							"$ref": "#/definitions/JsonNode"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK - Request executed successfully",
						"schema": {
							"originalRef": "Callable«ResponseData«List«Workflow»»»",
							"$ref": "#/definitions/Callable«ResponseData«List«Workflow»»»"
						}
					},
					"400": {
						"description": "Bad Request - Malformed content or invalid data provided"
					},
					"401": {
						"description": "Unauthorized - Authentication rejected"
					},
					"403": {
						"description": "Forbidden - Request rejected"
					},
					"404": {
						"description": "Not Found - Resource does not exist"
					},
					"409": {
						"description": "Conflict - System not ready"
					},
					"500": {
						"description": "Internal Server Error - Unrecognized system error"
					}
				},
				"security": [
					{
						"REST Token": [
							"global"
						]
					}
				],
				"deprecated": false
			}
		}
	},
	"securityDefinitions": {
		"REST Token": {
			"type": "apiKey",
			"name": "Authorization",
			"in": "header"
		}
	},
	"definitions": {
		"Action": {
			"type": "object",
			"properties": {
				"created_at": {
					"type": "string"
				},
				"definition": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"input": {
					"type": "string"
				},
				"is_system": {
					"type": "boolean"
				},
				"name": {
					"type": "string"
				},
				"project_id": {
					"type": "string"
				},
				"scope": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"updated_at": {
					"type": "string"
				}
			},
			"title": "Action"
		},
		"ActionClone": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				}
			},
			"title": "ActionClone"
		},
		"ActionExecution": {
			"type": "object",
			"properties": {
				"accepted": {
					"type": "string"
				},
				"created_at": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"input": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"name": {
					"type": "string"
				},
				"output": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"params": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"project_id": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"state_info": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"task_execution_id": {
					"type": "string"
				},
				"task_name": {
					"type": "string"
				},
				"updated_at": {
					"type": "string"
				},
				"workflow_name": {
					"type": "string"
				},
				"worker": {
					"type": "string",
					"description": "Worker for the action execution, values = default, lsom, triggers"
				}
			},
			"title": "ActionExecution"
		},
		"ActionExecutionRequest": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "Action name e.g. std.http"
				},
				"id": {
					"type": "string",
					"description": "Action id"
				},
				"description": {
					"type": "string",
					"description": "Action execution description"
				},
				"state": {
					"type": "string",
					"description": "Set the action state",
					"enum": [
						"SUCCESS",
						"ERROR",
						"CANCELLED",
						"PAUSED",
						"RUNNING"
					]
				},
				"input": {
					"description": "Inputs required by the action execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"output": {
					"description": "Set the action execution output value if required",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"params": {
					"description": "Optional System parameters for the action execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"state_info": {
					"type": "string",
					"description": "Additional state info"
				}
			},
			"title": "ActionExecutionRequest"
		},
		"ActionExecutionUpdateRequest": {
			"type": "object",
			"required": [
				"state"
			],
			"properties": {
				"description": {
					"type": "string",
					"description": "Action execution description, should be set exclusively and not combined with state or any other parameters"
				},
				"input": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"state": {
					"type": "string",
					"description": "set action_execution state, should be set exclusively and not combined with description",
					"enum": [
						"SUCCESS",
						"ERROR",
						"CANCELLED",
						"PAUSED",
						"RUNNING"
					]
				},
				"state_info": {
					"type": "string",
					"description": "set action_execution state info"
				},
				"output": {
					"description": "set action_execution output, output is the published result to the task",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"params": {
					"description": "Optional System parameters for the action execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"worker": {
					"type": "string",
					"description": "Worker selection for the action execution, values = default, lsom, triggers"
				}
			},
			"title": "ActionExecutionUpdateRequest"
		},
		"ActionRequest": {
			"type": "object",
			"properties": {
				"yaml": {
					"type": "string"
				}
			},
			"title": "ActionRequest"
		},
		"ApplicationFilterVO": {
			"type": "object",
			"properties": {
				"applicationFilter": {
					"type": "string"
				},
				"categories": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"topicName": {
					"type": "string"
				}
			},
			"title": "ApplicationFilterVO"
		},
		"Callable«ResponseData«List«Action»»»": {
			"type": "object",
			"title": "Callable«ResponseData«List«Action»»»"
		},
		"Callable«ResponseData«List«JinjaTemplate»»»": {
			"type": "object",
			"title": "Callable«ResponseData«List«JinjaTemplate»»»"
		},
		"Callable«ResponseData«List«Policy»»»": {
			"type": "object",
			"title": "Callable«ResponseData«List«Policy»»»"
		},
		"Callable«ResponseData«List«WorkflowEnvironment»»»": {
			"type": "object",
			"title": "Callable«ResponseData«List«WorkflowEnvironment»»»"
		},
		"Callable«ResponseData«List«Workflow»»»": {
			"type": "object",
			"title": "Callable«ResponseData«List«Workflow»»»"
		},
		"Callable«ResponseData«boolean»»": {
			"type": "object",
			"title": "Callable«ResponseData«boolean»»"
		},
		"CronTrigger": {
			"type": "object",
			"properties": {
				"created_at": {
					"type": "string"
				},
				"first_execution_time": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"next_execution_time": {
					"type": "string"
				},
				"pattern": {
					"type": "string"
				},
				"project_id": {
					"type": "string"
				},
				"remaining_executions": {
					"type": "integer",
					"format": "int32"
				},
				"scope": {
					"type": "string"
				},
				"updated_at": {
					"type": "string"
				},
				"workflow_id": {
					"type": "string"
				},
				"workflow_input": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"workflow_name": {
					"type": "string"
				},
				"workflow_params": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				}
			},
			"title": "CronTrigger"
		},
		"CronTriggerRequestNotify": {
			"type": "object",
			"required": [
				"name",
				"pattern",
				"remaining_executions",
				"workflow_id"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "Unique Cron/Schedule name"
				},
				"workflow_id": {
					"type": "string",
					"description": "ID of the workflow to be scheduled "
				},
				"workflow_input": {
					"description": "Inputs required by the workflow ",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"pattern": {
					"type": "string",
					"description": "Set the schedule using Cron pattern e.g. <0 12 * * ?> runs at 12pm everyday"
				},
				"remaining_executions": {
					"type": "integer",
					"format": "int32",
					"description": "Number of occurrences",
					"minimum": 1,
					"exclusiveMinimum": false,
					"exclusiveMaximum": false
				},
				"first_execution_time": {
					"type": "string",
					"description": "First Occurrence, format <YYYY-MM-DD HH:MM> Must be 1 minute in the future. Time expected to be in UTC"
				},
				"workflow_params": {
					"description": "Optional System parameters for the workflow execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"notifyKafka": {
					"type": "boolean",
					"description": "Subscribe workflow execution and task execution status to kafka topic 'wfm.nbi_webhook_subscription'"
				}
			},
			"title": "CronTriggerRequestNotify"
		},
		"Execution": {
			"type": "object",
			"required": [
				"workflow_id"
			],
			"properties": {
				"created_at": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"input": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"output": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"params": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"project_id": {
					"type": "string"
				},
				"root_execution_id": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"state_info": {
					"type": "string"
				},
				"updated_at": {
					"type": "string"
				},
				"worker": {
					"type": "string"
				},
				"workflow_id": {
					"type": "string"
				},
				"workflow_name": {
					"type": "string"
				},
				"workflow_namespace": {
					"type": "string"
				}
			},
			"title": "Execution"
		},
		"ExecutionRequest": {
			"type": "object",
			"required": [
				"workflow_id"
			],
			"properties": {
				"workflow_id": {
					"type": "string",
					"description": "Workflow unique identifier"
				},
				"workflow_name": {
					"type": "string",
					"description": "Workflow name"
				},
				"description": {
					"type": "string",
					"description": "Workflow execution description"
				},
				"input": {
					"description": "Input required by the workflow execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"params": {
					"description": "Optional System parameters for the workflow execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"output": {
					"description": "Workflow execution output",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"state": {
					"type": "string",
					"description": "Workflow execution state"
				},
				"state_info": {
					"type": "string",
					"description": "Additional state info"
				},
				"worker": {
					"type": "string",
					"description": "Worker, selects the engine & executor pair to run executions. Supported Values: default, lsom"
				}
			},
			"title": "ExecutionRequest"
		},
		"ExecutionRequestNotify": {
			"type": "object",
			"required": [
				"workflow_id"
			],
			"properties": {
				"workflow_id": {
					"type": "string",
					"description": "Workflow unique identifier"
				},
				"workflow_name": {
					"type": "string",
					"description": "Workflow name"
				},
				"description": {
					"type": "string",
					"description": "Workflow execution description"
				},
				"input": {
					"description": "Input required by the workflow execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"params": {
					"description": "Optional System parameters for the workflow execution",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"output": {
					"description": "Workflow execution output",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"state": {
					"type": "string",
					"description": "Workflow execution state"
				},
				"state_info": {
					"type": "string",
					"description": "Additional state info"
				},
				"notifyKafka": {
					"type": "boolean",
					"description": "Subscribe workflow execution and action execution status to kafka topic 'nsp.wfm_webhook'"
				},
				"worker": {
					"type": "string",
					"description": "Worker, selects the engine & executor pair to run executions. Supported Values: default, lsom"
				}
			},
			"title": "ExecutionRequestNotify"
		},
		"FilterTestRequest": {
			"type": "object",
			"required": [
				"filter_expression",
				"filter_type",
				"payload",
				"payload_type"
			],
			"properties": {
				"filter_type": {
					"type": "string",
					"description": "Type of filter (JSON_PATH/REGEX)",
					"enum": [
						"JSON_PATH",
						"REGEX"
					]
				},
				"filter_expression": {
					"type": "string",
					"description": "Filter expression in json-path or regex format"
				},
				"payload_type": {
					"type": "string",
					"description": "Type of payload to test filter against (JSON/TEXT)"
				},
				"payload": {
					"description": "Payload to test against. If filter type is TEXT, then json should only have one key named 'text'",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				}
			},
			"title": "FilterTestRequest"
		},
		"FilterTestResponse": {
			"type": "object",
			"properties": {
				"match_result": {
					"description": "The result of the match",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				}
			},
			"title": "FilterTestResponse"
		},
		"JinjaTemplate": {
			"type": "object",
			"required": [
				"id",
				"name",
				"template"
			],
			"properties": {
				"id": {
					"type": "string",
					"description": "ID"
				},
				"name": {
					"type": "string",
					"description": "Name"
				},
				"description": {
					"type": "string",
					"description": "Description"
				},
				"tags": {
					"type": "array",
					"description": "Tags",
					"items": {
						"type": "string"
					}
				},
				"template": {
					"type": "string",
					"description": "Jinja Template"
				},
				"created_at": {
					"type": "string",
					"description": "Created At"
				},
				"updated_at": {
					"type": "string",
					"description": "Updated At"
				},
				"created_by": {
					"type": "string",
					"description": "Created By"
				},
				"modified_by": {
					"type": "string",
					"description": "Modified By"
				}
			},
			"title": "JinjaTemplate"
		},
		"JsonNode": {
			"type": "object",
			"title": "JsonNode"
		},
		"KafkaTrigger": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the kafka trigger"
				},
				"id": {
					"type": "string",
					"description": "UUID of the Kafka Trigger"
				},
				"topic": {
					"type": "string",
					"description": "Kafka topic (e.g. nsp-db-fm)"
				},
				"kafka_event": {
					"type": "string",
					"description": "Kafka event type (CREATE/UPDATE/DELETE for NSP model object topics or JSON for plain json)",
					"enum": [
						"CREATE",
						"UPDATE",
						"DELETE",
						"JSON"
					]
				},
				"trigger_rule": {
					"type": "string",
					"description": "JSONPath expression to match kafka message payload e.g. $[?(@.neId == '11.11.11.11')]"
				},
				"workflow_id": {
					"type": "string",
					"description": "UUID of workflow to execute if trigger_rule matches Kafka message payload"
				},
				"workflow_name": {
					"type": "string",
					"description": "Name of workflow to execute if trigger_rule matches Kafka message payload"
				},
				"created_at": {
					"type": "string",
					"description": "Created timestamp (UTC)"
				},
				"updated_at": {
					"type": "string",
					"description": "Last updated timestamp (UTC)"
				},
				"enabled": {
					"type": "boolean",
					"description": "Flag indicating whether or not this kafka-trigger is enabled"
				},
				"rate_limit_per_minute": {
					"type": "integer",
					"format": "int32",
					"description": "Limit to how many times this kafka-trigger will be executed per minute"
				},
				"match_count": {
					"type": "integer",
					"format": "int64",
					"description": "Count of how many times this kafka-trigger was matched to a kafka message"
				},
				"execution_count": {
					"type": "integer",
					"format": "int64",
					"description": "Count of how many times a match caused this kafka-trigger to execute workflow (within rate limit)"
				},
				"subscription_status": {
					"type": "string",
					"description": "Status of the subscription to the Kafka topic of this kafka-trigger",
					"enum": [
						"Not Started",
						"Active",
						"Failed"
					]
				}
			},
			"title": "KafkaTrigger"
		},
		"KafkaTriggerRequest": {
			"type": "object",
			"required": [
				"enabled",
				"kafka_event",
				"name",
				"trigger_rule",
				"workflow_id"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the kafka trigger"
				},
				"topic": {
					"type": "string",
					"example": "nsp-db-fm",
					"description": "The topic to listen to (default nsp-db-fm)"
				},
				"kafka_event": {
					"type": "string",
					"description": "Kafka event type (CREATE/UPDATE/DELETE for NSP model objects or JSON for plain json)",
					"enum": [
						"CREATE",
						"UPDATE",
						"DELETE",
						"JSON"
					]
				},
				"trigger_rule": {
					"type": "string",
					"description": "JSONPath expression to match kafka message payload e.g. $[?(@.neId == '11.11.11.11')]"
				},
				"workflow_id": {
					"type": "string",
					"description": "UUID of workflow to execute if trigger_rule matches Kafka message payload"
				},
				"enabled": {
					"type": "boolean",
					"description": "Flag indicating whether or not this kafka-trigger is enabled"
				},
				"rate_limit_per_minute": {
					"type": "integer",
					"format": "int32",
					"description": "Limit to how many times this kafka-trigger will be executed per minute"
				}
			},
			"title": "KafkaTriggerRequest"
		},
		"Policy": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "Name"
				},
				"version": {
					"type": "string",
					"description": "Version"
				},
				"schedule": {
					"type": "string",
					"description": "Schedule"
				},
				"created_at": {
					"type": "string",
					"description": "Created At"
				},
				"updated_at": {
					"type": "string",
					"description": "Updated At"
				},
				"created_by": {
					"type": "string",
					"description": "Created By"
				},
				"updated_by": {
					"type": "string",
					"description": "Updated By"
				},
				"execution_state": {
					"type": "string",
					"description": "Execution State"
				},
				"enabled": {
					"type": "boolean",
					"description": "Enabled"
				},
				"older_than": {
					"type": "integer",
					"format": "int64",
					"description": "Older Than"
				},
				"operation": {
					"type": "string",
					"description": "Operation"
				}
			},
			"title": "Policy"
		},
		"PolicyRequest": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"description": "Name"
				},
				"version": {
					"type": "string",
					"description": "Version"
				},
				"schedule": {
					"type": "string",
					"description": "Schedule"
				},
				"execution_state": {
					"type": "string",
					"description": "Execution State"
				},
				"enabled": {
					"type": "boolean",
					"description": "Enabled"
				},
				"older_than": {
					"type": "integer",
					"format": "int64",
					"description": "Older Than"
				},
				"operation": {
					"type": "string",
					"description": "Operation"
				}
			},
			"title": "PolicyRequest"
		},
		"ProducerStartVO": {
			"type": "object",
			"properties": {
				"applicationFilter": {
					"type": "string"
				},
				"categories": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"filterablePropertyNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"topicName": {
					"type": "string"
				}
			},
			"title": "ProducerStartVO"
		},
		"ProducerStopVO": {
			"type": "object",
			"properties": {
				"categories": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"topicName": {
					"type": "string"
				}
			},
			"title": "ProducerStopVO"
		},
		"PropertyNamesVO": {
			"type": "object",
			"properties": {
				"categories": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"propertyNames": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"title": "PropertyNamesVO"
		},
		"ResponseData": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«object»",
					"$ref": "#/definitions/Response«object»"
				}
			},
			"title": "ResponseData"
		},
		"ResponseData«ActionExecution»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«ActionExecution»",
					"$ref": "#/definitions/Response«ActionExecution»"
				}
			},
			"title": "ResponseData«ActionExecution»"
		},
		"ResponseData«Action»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«Action»",
					"$ref": "#/definitions/Response«Action»"
				}
			},
			"title": "ResponseData«Action»"
		},
		"ResponseData«CronTrigger»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«CronTrigger»",
					"$ref": "#/definitions/Response«CronTrigger»"
				}
			},
			"title": "ResponseData«CronTrigger»"
		},
		"ResponseData«Execution»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«Execution»",
					"$ref": "#/definitions/Response«Execution»"
				}
			},
			"title": "ResponseData«Execution»"
		},
		"ResponseData«FilterTestResponse»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«FilterTestResponse»",
					"$ref": "#/definitions/Response«FilterTestResponse»"
				}
			},
			"title": "ResponseData«FilterTestResponse»"
		},
		"ResponseData«JinjaTemplate»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«JinjaTemplate»",
					"$ref": "#/definitions/Response«JinjaTemplate»"
				}
			},
			"title": "ResponseData«JinjaTemplate»"
		},
		"ResponseData«KafkaTrigger»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«KafkaTrigger»",
					"$ref": "#/definitions/Response«KafkaTrigger»"
				}
			},
			"title": "ResponseData«KafkaTrigger»"
		},
		"ResponseData«List«ActionExecution»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«ActionExecution»»",
					"$ref": "#/definitions/Response«List«ActionExecution»»"
				}
			},
			"title": "ResponseData«List«ActionExecution»»"
		},
		"ResponseData«List«Action»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«Action»»",
					"$ref": "#/definitions/Response«List«Action»»"
				}
			},
			"title": "ResponseData«List«Action»»"
		},
		"ResponseData«List«CronTrigger»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«CronTrigger»»",
					"$ref": "#/definitions/Response«List«CronTrigger»»"
				}
			},
			"title": "ResponseData«List«CronTrigger»»"
		},
		"ResponseData«List«Execution»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«Execution»»",
					"$ref": "#/definitions/Response«List«Execution»»"
				}
			},
			"title": "ResponseData«List«Execution»»"
		},
		"ResponseData«List«JinjaTemplate»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«JinjaTemplate»»",
					"$ref": "#/definitions/Response«List«JinjaTemplate»»"
				}
			},
			"title": "ResponseData«List«JinjaTemplate»»"
		},
		"ResponseData«List«KafkaTrigger»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«KafkaTrigger»»",
					"$ref": "#/definitions/Response«List«KafkaTrigger»»"
				}
			},
			"title": "ResponseData«List«KafkaTrigger»»"
		},
		"ResponseData«List«Policy»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«Policy»»",
					"$ref": "#/definitions/Response«List«Policy»»"
				}
			},
			"title": "ResponseData«List«Policy»»"
		},
		"ResponseData«List«Task»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«Task»»",
					"$ref": "#/definitions/Response«List«Task»»"
				}
			},
			"title": "ResponseData«List«Task»»"
		},
		"ResponseData«List«WorkflowEnvironment»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«WorkflowEnvironment»»",
					"$ref": "#/definitions/Response«List«WorkflowEnvironment»»"
				}
			},
			"title": "ResponseData«List«WorkflowEnvironment»»"
		},
		"ResponseData«List«Workflow»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«Workflow»»",
					"$ref": "#/definitions/Response«List«Workflow»»"
				}
			},
			"title": "ResponseData«List«Workflow»»"
		},
		"ResponseData«List«string»»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«List«string»»",
					"$ref": "#/definitions/Response«List«string»»"
				}
			},
			"title": "ResponseData«List«string»»"
		},
		"ResponseData«Policy»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«Policy»",
					"$ref": "#/definitions/Response«Policy»"
				}
			},
			"title": "ResponseData«Policy»"
		},
		"ResponseData«Statistics»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«Statistics»",
					"$ref": "#/definitions/Response«Statistics»"
				}
			},
			"title": "ResponseData«Statistics»"
		},
		"ResponseData«SystemStatus»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«SystemStatus»",
					"$ref": "#/definitions/Response«SystemStatus»"
				}
			},
			"title": "ResponseData«SystemStatus»"
		},
		"ResponseData«Task»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«Task»",
					"$ref": "#/definitions/Response«Task»"
				}
			},
			"title": "ResponseData«Task»"
		},
		"ResponseData«Validate»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«Validate»",
					"$ref": "#/definitions/Response«Validate»"
				}
			},
			"title": "ResponseData«Validate»"
		},
		"ResponseData«WorkflowEnvironment»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«WorkflowEnvironment»",
					"$ref": "#/definitions/Response«WorkflowEnvironment»"
				}
			},
			"title": "ResponseData«WorkflowEnvironment»"
		},
		"ResponseData«WorkflowPreview»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«WorkflowPreview»",
					"$ref": "#/definitions/Response«WorkflowPreview»"
				}
			},
			"title": "ResponseData«WorkflowPreview»"
		},
		"ResponseData«Workflow»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«Workflow»",
					"$ref": "#/definitions/Response«Workflow»"
				}
			},
			"title": "ResponseData«Workflow»"
		},
		"ResponseData«boolean»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«boolean»",
					"$ref": "#/definitions/Response«boolean»"
				}
			},
			"title": "ResponseData«boolean»"
		},
		"ResponseData«string»": {
			"type": "object",
			"properties": {
				"response": {
					"originalRef": "Response«string»",
					"$ref": "#/definitions/Response«string»"
				}
			},
			"title": "ResponseData«string»"
		},
		"Response«ActionExecution»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "ActionExecution",
					"$ref": "#/definitions/ActionExecution"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«ActionExecution»"
		},
		"Response«Action»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "Action",
					"$ref": "#/definitions/Action"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«Action»"
		},
		"Response«CronTrigger»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "CronTrigger",
					"$ref": "#/definitions/CronTrigger"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«CronTrigger»"
		},
		"Response«Execution»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "Execution",
					"$ref": "#/definitions/Execution"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«Execution»"
		},
		"Response«FilterTestResponse»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "FilterTestResponse",
					"$ref": "#/definitions/FilterTestResponse"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«FilterTestResponse»"
		},
		"Response«JinjaTemplate»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "JinjaTemplate",
					"$ref": "#/definitions/JinjaTemplate"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«JinjaTemplate»"
		},
		"Response«KafkaTrigger»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "KafkaTrigger",
					"$ref": "#/definitions/KafkaTrigger"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«KafkaTrigger»"
		},
		"Response«List«ActionExecution»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "ActionExecution",
						"$ref": "#/definitions/ActionExecution"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«ActionExecution»»"
		},
		"Response«List«Action»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "Action",
						"$ref": "#/definitions/Action"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«Action»»"
		},
		"Response«List«CronTrigger»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "CronTrigger",
						"$ref": "#/definitions/CronTrigger"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«CronTrigger»»"
		},
		"Response«List«Execution»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "Execution",
						"$ref": "#/definitions/Execution"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«Execution»»"
		},
		"Response«List«JinjaTemplate»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "JinjaTemplate",
						"$ref": "#/definitions/JinjaTemplate"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«JinjaTemplate»»"
		},
		"Response«List«KafkaTrigger»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "KafkaTrigger",
						"$ref": "#/definitions/KafkaTrigger"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«KafkaTrigger»»"
		},
		"Response«List«Policy»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "Policy",
						"$ref": "#/definitions/Policy"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«Policy»»"
		},
		"Response«List«Task»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "Task",
						"$ref": "#/definitions/Task"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«Task»»"
		},
		"Response«List«WorkflowEnvironment»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "WorkflowEnvironment",
						"$ref": "#/definitions/WorkflowEnvironment"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«WorkflowEnvironment»»"
		},
		"Response«List«Workflow»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"originalRef": "Workflow",
						"$ref": "#/definitions/Workflow"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«Workflow»»"
		},
		"Response«List«string»»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«List«string»»"
		},
		"Response«Policy»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "Policy",
					"$ref": "#/definitions/Policy"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«Policy»"
		},
		"Response«Statistics»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "Statistics",
					"$ref": "#/definitions/Statistics"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«Statistics»"
		},
		"Response«SystemStatus»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "SystemStatus",
					"$ref": "#/definitions/SystemStatus"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«SystemStatus»"
		},
		"Response«Task»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "Task",
					"$ref": "#/definitions/Task"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«Task»"
		},
		"Response«Validate»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "Validate",
					"$ref": "#/definitions/Validate"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«Validate»"
		},
		"Response«WorkflowEnvironment»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "WorkflowEnvironment",
					"$ref": "#/definitions/WorkflowEnvironment"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«WorkflowEnvironment»"
		},
		"Response«WorkflowPreview»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "WorkflowPreview",
					"$ref": "#/definitions/WorkflowPreview"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«WorkflowPreview»"
		},
		"Response«Workflow»": {
			"type": "object",
			"properties": {
				"data": {
					"originalRef": "Workflow",
					"$ref": "#/definitions/Workflow"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«Workflow»"
		},
		"Response«boolean»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "boolean"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«boolean»"
		},
		"Response«object»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "object"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"next": {
					"type": "string"
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«object»"
		},
		"Response«string»": {
			"type": "object",
			"properties": {
				"data": {
					"type": "string"
				},
				"endRow": {
					"type": "integer",
					"format": "int64"
				},
				"errors": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"nextPage": {
					"type": "string",
					"description": "(Optional) A paged URL request pointing to the next page of data, or \"null\" if there is no next page."
				},
				"previousPage": {
					"type": "string",
					"description": "(Optional) A paged URL request pointing to the previous page of data, or \"null\" if there is no previous page."
				},
				"startRow": {
					"type": "integer",
					"format": "int64"
				},
				"status": {
					"type": "integer",
					"format": "int32"
				},
				"totalRows": {
					"type": "integer",
					"format": "int64"
				}
			},
			"title": "Response«string»"
		},
		"Statistics": {
			"type": "object",
			"properties": {
				"cancelled": {
					"type": "integer",
					"format": "int32"
				},
				"delayed": {
					"type": "integer",
					"format": "int32"
				},
				"error": {
					"type": "integer",
					"format": "int32"
				},
				"paused": {
					"type": "integer",
					"format": "int32"
				},
				"running": {
					"type": "integer",
					"format": "int32"
				},
				"success": {
					"type": "integer",
					"format": "int32"
				},
				"total": {
					"type": "integer",
					"format": "int32"
				},
				"waiting": {
					"type": "integer",
					"format": "int32"
				},
				"waitingForUserInput": {
					"type": "integer",
					"format": "int32"
				}
			},
			"title": "Statistics"
		},
		"SystemStatus": {
			"type": "object",
			"properties": {
				"status": {
					"type": "string",
					"enum": [
						"UP",
						"DOWN",
						"DEGRADED"
					]
				}
			},
			"title": "SystemStatus"
		},
		"Task": {
			"type": "object",
			"properties": {
				"created_at": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"published": {
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				},
				"result": {
					"type": "string"
				},
				"runtime_context": {
					"type": "string"
				},
				"state": {
					"type": "string"
				},
				"state_info": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"updated_at": {
					"type": "string"
				},
				"workflow_execution_id": {
					"type": "string"
				},
				"workflow_id": {
					"type": "string"
				},
				"workflow_name": {
					"type": "string"
				},
				"worker": {
					"type": "string",
					"description": "Worker the task execution, values = default, lsom, triggers"
				}
			},
			"title": "Task"
		},
		"TaskUpdateRequest": {
			"type": "object",
			"properties": {
				"reset": {
					"type": "boolean",
					"description": "Restart the task. Default is true, false is only applicable to tasks using with-items"
				},
				"state": {
					"type": "string"
				},
				"env": {
					"description": "Update environment variables in the task if needed",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				}
			},
			"title": "TaskUpdateRequest"
		},
		"UserGroupRequest": {
			"type": "object",
			"required": [
				"userGroups",
				"workflowIds"
			],
			"properties": {
				"userGroups": {
					"type": "array",
					"description": "User Groups to associate with Workflow ids",
					"items": {
						"type": "string"
					}
				},
				"workflowIds": {
					"type": "array",
					"description": "Workflow ids to update user groups",
					"items": {
						"type": "string"
					}
				}
			},
			"title": "UserGroupRequest"
		},
		"Validate": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string"
				},
				"valid": {
					"type": "string"
				}
			},
			"title": "Validate"
		},
		"Workflow": {
			"type": "object",
			"properties": {
				"created_at": {
					"type": "string"
				},
				"definition": {
					"type": "string"
				},
				"details": {
					"originalRef": "WorkflowDetail",
					"$ref": "#/definitions/WorkflowDetail"
				},
				"id": {
					"type": "string"
				},
				"input": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"namespace": {
					"type": "string"
				},
				"project_id": {
					"type": "string"
				},
				"scope": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"updated_at": {
					"type": "string"
				}
			},
			"title": "Workflow"
		},
		"WorkflowClone": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				}
			},
			"title": "WorkflowClone"
		},
		"WorkflowDetail": {
			"type": "object",
			"properties": {
				"created_by": {
					"type": "string",
					"description": "created by nsp user"
				},
				"gitPath": {
					"type": "string",
					"description": "GitHub imported workflow path"
				},
				"gitSha": {
					"type": "string",
					"description": "GitHub imported workflow hash"
				},
				"gitUpdate": {
					"type": "boolean",
					"description": "Update available for GitHub imported workflow"
				},
				"last_modified_at": {
					"type": "string",
					"description": "last modified at timestamp UTC"
				},
				"local_definition": {
					"type": "string",
					"description": "local draft definition"
				},
				"modified_by": {
					"type": "string",
					"description": "last modified by nsp user"
				},
				"provided_by": {
					"type": "string",
					"description": "provider / author of the worklow"
				},
				"readme": {
					"type": "string",
					"description": "Readme about the workflow"
				},
				"signature": {
					"type": "string",
					"description": "Workflow signature",
					"enum": [
						"SIGNED",
						"NOTSIGNED",
						"INVALID",
						"EXPIRED"
					]
				},
				"status": {
					"type": "string",
					"enum": [
						"DRAFT",
						"PUBLISHED",
						"DEPRECATED",
						"DESTROY_DRAFT"
					]
				},
				"userGroups": {
					"type": "array",
					"description": "User groups associated to workflow",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				},
				"workflow_hash": {
					"type": "string",
					"description": "Workflow definition hash sha256"
				}
			},
			"title": "WorkflowDetail"
		},
		"WorkflowEnvironment": {
			"type": "object",
			"required": [
				"definition",
				"name"
			],
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string",
					"description": "Workflow Environment Name"
				},
				"definition": {
					"type": "string",
					"description": "Workflow Environment Definition JSON"
				}
			},
			"title": "WorkflowEnvironment"
		},
		"WorkflowPreview": {
			"type": "object",
			"properties": {
				"actionExecutions": {
					"type": "array",
					"items": {
						"originalRef": "ActionExecution",
						"$ref": "#/definitions/ActionExecution"
					}
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"input": {
					"type": "string"
				},
				"maxTasksReached": {
					"type": "boolean"
				},
				"name": {
					"type": "string"
				},
				"output": {
					"type": "string"
				},
				"tasks": {
					"type": "array",
					"items": {
						"originalRef": "Task",
						"$ref": "#/definitions/Task"
					}
				},
				"type": {
					"type": "string"
				}
			},
			"title": "WorkflowPreview"
		},
		"WorkflowRequest": {
			"type": "object",
			"required": [
				"yaml"
			],
			"properties": {
				"yaml": {
					"type": "string",
					"description": "Workflow definition"
				},
				"provided_by": {
					"type": "string",
					"description": "Workflow author/provider, workflow definition author takes precedence"
				},
				"version": {
					"type": "string",
					"description": "Workflow version"
				},
				"readme": {
					"type": "string",
					"description": "Workflow readme document"
				},
				"yang": {
					"type": "string",
					"description": "Workflow Yang document"
				},
				"gitPath": {
					"type": "string",
					"description": "GitHub Workflow Path"
				},
				"gitSha": {
					"type": "string",
					"description": "GitHub Workflow Sha"
				},
				"gitOwner": {
					"type": "string",
					"description": "GitHub Workflow Owner"
				},
				"gitRepository": {
					"type": "string",
					"description": "GitHub Workflow Repository"
				},
				"uiJSON": {
					"description": "Workflow UI JSON",
					"originalRef": "JsonNode",
					"$ref": "#/definitions/JsonNode"
				}
			},
			"title": "WorkflowRequest"
		},
		"WorkflowUpdateStatusRequest": {
			"type": "object",
			"required": [
				"status"
			],
			"properties": {
				"status": {
					"type": "string",
					"description": "Workflow status",
					"enum": [
						"DRAFT",
						"PUBLISHED",
						"DEPRECATED",
						"DESTROY_DRAFT"
					]
				}
			},
			"title": "WorkflowUpdateStatusRequest"
		}
	}
}
